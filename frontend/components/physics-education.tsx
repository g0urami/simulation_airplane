"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { BookOpen, Calculator, Wind, Gauge, RotateCcw, AlertTriangle, CheckCircle, Play, Lightbulb } from "lucide-react"

export function PhysicsEducation() {
  const [selectedConcept, setSelectedConcept] = useState("bernoulli")
  const [completedTopics, setCompletedTopics] = useState<string[]>([])
  const [currentQuiz, setCurrentQuiz] = useState<number | null>(null)
  const [quizAnswers, setQuizAnswers] = useState<{ [key: string]: string }>({})

  const physicsTopics = [
    {
      id: "bernoulli",
      title: "Bernoulli's Principle",
      icon: Wind,
      description: "Fluid speed increases as pressure decreases",
      formula: "P₁ + ½ρv₁² = P₂ + ½ρv₂²",
      explanation:
        "As air flows faster over the curved upper surface of a wing, its pressure decreases relative to the slower-moving air below, creating lift.",
      applications: ["Wing design", "Venturi tubes", "Carburetor operation"],
      advanced:
        "In real flight, Bernoulli's principle works together with Newton's laws. The wing deflects air downward (Newton's 3rd law), and the curved airflow creates pressure differences (Bernoulli).",
    },
    {
      id: "lift",
      title: "Lift Force",
      icon: BookOpen,
      description: "Upward force generated by wing shape and angle",
      formula: "L = ½ρv²ACₗ",
      explanation:
        "Lift is generated through a combination of pressure differences (Bernoulli) and momentum change (Newton). The wing's shape and angle of attack are crucial.",
      applications: ["Wing design", "Flap systems", "Helicopter rotors"],
      advanced:
        "Lift coefficient (Cₗ) varies with angle of attack up to the stall point. Beyond 15-20°, flow separation occurs and lift drops dramatically.",
    },
    {
      id: "drag",
      title: "Drag Force",
      icon: Wind,
      description: "Resistance force opposing motion through air",
      formula: "D = ½ρv²ACᴅ",
      explanation:
        "Drag consists of pressure drag (form drag) and friction drag. It increases with the square of velocity, making high-speed flight energy-intensive.",
      applications: ["Streamlining", "Winglets", "Landing gear design"],
      advanced:
        "At high speeds, wave drag becomes significant due to compressibility effects. This is why supersonic aircraft have different design requirements.",
    },
    {
      id: "moments",
      title: "Moments & Torque",
      icon: RotateCcw,
      description: "Rotational forces around aircraft axes",
      formula: "τ = r × F",
      explanation:
        "Aircraft rotate around three axes: pitch (nose up/down), roll (wing up/down), and yaw (nose left/right). Control surfaces create moments about these axes.",
      applications: ["Control surfaces", "Stability design", "Autopilot systems"],
      advanced:
        "Moment of inertia affects how quickly an aircraft responds to control inputs. Larger aircraft have higher inertia and respond more slowly.",
    },
    {
      id: "stall",
      title: "Stall Conditions",
      icon: AlertTriangle,
      description: "Loss of lift due to flow separation",
      formula: "Critical AOA ≈ 15-20°",
      explanation:
        "When angle of attack exceeds the critical angle, airflow separates from the wing's upper surface, causing a dramatic loss of lift and increase in drag.",
      applications: ["Stall warning systems", "Recovery procedures", "Wing design"],
      advanced:
        "Stall characteristics vary with wing design. Some aircraft have gentle stall behavior, while others may have abrupt stalls or tip stalls that can lead to spins.",
    },
    {
      id: "density",
      title: "Air Density Effects",
      icon: Gauge,
      description: "How altitude affects aircraft performance",
      formula: "ρ = ρ₀e^(-h/H)",
      explanation:
        "Air density decreases exponentially with altitude. This affects lift, drag, and engine performance, requiring higher speeds for the same lift at altitude.",
      applications: ["Performance calculations", "Service ceiling", "Turbocharged engines"],
      advanced:
        "The International Standard Atmosphere (ISA) model accounts for temperature and pressure changes with altitude. Real conditions often differ from ISA.",
    },
  ]

  const quizQuestions = {
    bernoulli: [
      {
        question: "What happens to air pressure as air speed increases over a wing?",
        options: ["Increases", "Decreases", "Stays the same", "Becomes turbulent"],
        correct: 1,
        explanation: "According to Bernoulli's principle, as fluid speed increases, pressure decreases.",
      },
      {
        question: "Which part of the wing typically has faster airflow?",
        options: ["Bottom surface", "Top surface", "Both equal", "Depends on aircraft"],
        correct: 1,
        explanation: "The curved upper surface causes air to travel faster, creating lower pressure above the wing.",
      },
    ],
    lift: [
      {
        question: "What happens to lift when you double the airspeed?",
        options: ["Doubles", "Quadruples", "Halves", "Stays the same"],
        correct: 1,
        explanation: "Lift is proportional to velocity squared (v²), so doubling speed quadruples the lift.",
      },
    ],
    drag: [
      {
        question: "What type of drag increases most significantly with speed?",
        options: ["Induced drag", "Parasitic drag", "Wave drag", "Form drag"],
        correct: 1,
        explanation: "Parasitic drag increases with the square of velocity, making it dominant at high speeds.",
      },
    ],
    moments: [
      {
        question: "Which control surface primarily controls pitch?",
        options: ["Rudder", "Ailerons", "Elevator", "Flaps"],
        correct: 2,
        explanation: "The elevator controls pitch by creating moments about the aircraft's lateral axis.",
      },
    ],
    stall: [
      {
        question: "What is the typical critical angle of attack for most aircraft?",
        options: ["5-8°", "10-12°", "15-20°", "25-30°"],
        correct: 2,
        explanation: "Most aircraft stall between 15-20° angle of attack, though this varies by wing design.",
      },
    ],
    density: [
      {
        question: "How does air density change with altitude?",
        options: ["Increases linearly", "Decreases linearly", "Decreases exponentially", "Remains constant"],
        correct: 2,
        explanation: "Air density decreases exponentially with altitude according to the barometric formula.",
      },
    ],
  }

  const practicalScenarios = {
    bernoulli: [
      {
        title: "Takeoff Scenario",
        description: "A Boeing 737 needs 280 km/h for takeoff. Calculate the pressure difference needed.",
        values: { speed: 280, wingArea: 125, density: 1.225 },
        solution: "Dynamic pressure = ½ × 1.225 × (77.8)² = 3,708 Pa",
      },
    ],
    lift: [
      {
        title: "Cruise Flight",
        description: "Maintaining level flight at 35,000 ft requires balancing lift with weight.",
        values: { weight: 70000, altitude: 35000 },
        solution: "At cruise altitude, lift must exactly equal weight for level flight.",
      },
    ],
    drag: [
      {
        title: "High-Speed Flight",
        description: "Calculate drag increase when doubling speed from 250 to 500 km/h.",
        values: { initialSpeed: 250, finalSpeed: 500, dragCoeff: 0.025 },
        solution: "Drag increases by factor of 4 (speed squared relationship): 4× more drag at 500 km/h",
      },
    ],
    moments: [
      {
        title: "Control Response",
        description: "Understanding how elevator deflection creates pitching moments.",
        values: { elevatorArea: 15, deflection: 10, armLength: 12 },
        solution: "Moment = Force × Distance. Larger elevator area and longer arm create stronger moments.",
      },
    ],
    stall: [
      {
        title: "Stall Recovery",
        description: "Proper technique for recovering from a stall condition.",
        values: { criticalAOA: 16, currentAOA: 18, recoveryAOA: 8 },
        solution: "Reduce angle of attack below critical value, add power, maintain coordinated flight.",
      },
    ],
    density: [
      {
        title: "High Altitude Performance",
        description: "How reduced air density at 10,000m affects lift generation.",
        values: { seaLevelDensity: 1.225, altitude: 10000, densityRatio: 0.31 },
        solution: "At 10,000m, air density is ~31% of sea level, requiring higher speeds for same lift.",
      },
    ],
  }

  const markTopicComplete = (topicId: string) => {
    if (!completedTopics.includes(topicId)) {
      setCompletedTopics((prev) => [...prev, topicId])
    }
  }

  const selectedTopic = physicsTopics.find((topic) => topic.id === selectedConcept)
  const currentQuizData = quizQuestions[selectedConcept as keyof typeof quizQuestions] || []
  const currentScenarios = practicalScenarios[selectedConcept as keyof typeof practicalScenarios] || []

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
      {/* Topic Selection with Progress */}
      <div className="lg:col-span-1">
        <Card>
          <CardHeader>
            <CardTitle className="font-sans">Physics Concepts</CardTitle>
            <CardDescription className="font-serif">
              Progress: {completedTopics.length}/{physicsTopics.length} topics
            </CardDescription>
            <Progress value={(completedTopics.length / physicsTopics.length) * 100} className="h-2" />
          </CardHeader>
          <CardContent className="space-y-2">
            {physicsTopics.map((topic) => {
              const Icon = topic.icon
              const isCompleted = completedTopics.includes(topic.id)
              return (
                <button
                  key={topic.id}
                  onClick={() => setSelectedConcept(topic.id)}
                  className={`w-full p-3 rounded-lg border text-left transition-colors relative ${
                    selectedConcept === topic.id
                      ? "bg-primary text-primary-foreground border-primary"
                      : "bg-card hover:bg-muted border-border"
                  }`}
                >
                  <div className="flex items-center gap-2 mb-1">
                    <Icon className="h-4 w-4" />
                    <span className="font-medium font-sans text-sm">{topic.title}</span>
                    {isCompleted && <CheckCircle className="h-3 w-3 text-green-600 ml-auto" />}
                  </div>
                  <p className="text-xs font-serif opacity-80">{topic.description}</p>
                </button>
              )
            })}
          </CardContent>
        </Card>
      </div>

      {/* Enhanced Topic Details */}
      <div className="lg:col-span-3">
        {selectedTopic && (
          <div className="space-y-6">
            {/* Main Concept with Learning Objectives */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-primary rounded-lg">
                      <selectedTopic.icon className="h-6 w-6 text-primary-foreground" />
                    </div>
                    <div>
                      <CardTitle className="font-sans">{selectedTopic.title}</CardTitle>
                      <CardDescription className="font-serif">{selectedTopic.description}</CardDescription>
                    </div>
                  </div>
                  <Button
                    onClick={() => markTopicComplete(selectedTopic.id)}
                    variant={completedTopics.includes(selectedTopic.id) ? "secondary" : "outline"}
                    size="sm"
                    className="font-serif"
                  >
                    {completedTopics.includes(selectedTopic.id) ? (
                      <>
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Completed
                      </>
                    ) : (
                      "Mark Complete"
                    )}
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <h4 className="font-semibold font-sans mb-2 flex items-center gap-2">
                    <Lightbulb className="h-4 w-4 text-blue-600" />
                    Learning Objectives
                  </h4>
                  <ul className="text-sm font-serif text-blue-800 space-y-1">
                    <li>• Understand the fundamental principle and its mathematical relationship</li>
                    <li>• Identify real-world applications in aviation</li>
                    <li>• Apply the concept to solve practical flight problems</li>
                    <li>• Recognize how this principle interacts with other flight forces</li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-semibold font-sans mb-2">Key Formula</h4>
                  <div className="p-4 bg-muted rounded-lg font-mono text-lg text-center">{selectedTopic.formula}</div>
                  <p className="text-sm font-serif text-muted-foreground mt-2">
                    Where: ρ = air density, v = velocity, A = wing area, C = coefficient
                  </p>
                </div>

                <div>
                  <h4 className="font-semibold font-sans mb-2">Detailed Explanation</h4>
                  <p className="font-serif leading-relaxed text-muted-foreground">{selectedTopic.explanation}</p>
                </div>

                <div>
                  <h4 className="font-semibold font-sans mb-3">Applications</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedTopic.applications.map((app, index) => (
                      <Badge key={index} variant="secondary" className="font-serif">
                        {app}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="border-t border-border pt-4">
                  <h4 className="font-semibold font-sans mb-2 flex items-center gap-2">
                    <Calculator className="h-4 w-4" />
                    Advanced Concepts
                  </h4>
                  <p className="font-serif leading-relaxed text-muted-foreground">{selectedTopic.advanced}</p>
                </div>
              </CardContent>
            </Card>

            {/* Enhanced Interactive Examples with Scenarios and Quizzes */}
            <Card>
              <CardHeader>
                <CardTitle className="font-sans">Interactive Learning</CardTitle>
                <CardDescription className="font-serif">
                  Practice with real scenarios and test your understanding
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="scenarios" className="w-full">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="scenarios" className="font-serif">
                      Scenarios
                    </TabsTrigger>
                    <TabsTrigger value="calculation" className="font-serif">
                      Calculations
                    </TabsTrigger>
                    <TabsTrigger value="quiz" className="font-serif">
                      Quiz
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="scenarios" className="space-y-4">
                    {currentScenarios.length > 0 ? (
                      currentScenarios.map((scenario, index) => (
                        <Card key={index}>
                          <CardHeader className="pb-3">
                            <CardTitle className="text-base font-sans flex items-center gap-2">
                              <Play className="h-4 w-4" />
                              {scenario.title}
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <p className="font-serif text-muted-foreground">{scenario.description}</p>
                            <div className="p-3 bg-muted rounded-lg">
                              <h5 className="font-semibold font-sans text-sm mb-2">Given Values:</h5>
                              <div className="grid grid-cols-2 gap-2 text-sm font-serif">
                                {Object.entries(scenario.values).map(([key, value]) => (
                                  <div key={key}>
                                    <span className="capitalize">{key}:</span> {value}
                                  </div>
                                ))}
                              </div>
                            </div>
                            <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                              <h5 className="font-semibold font-sans text-sm mb-2 text-green-800">Solution:</h5>
                              <p className="text-sm font-serif text-green-700">{scenario.solution}</p>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    ) : (
                      <div className="text-center py-8 text-muted-foreground font-serif">
                        More scenarios coming soon for this topic!
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="calculation" className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="p-4 bg-muted rounded-lg">
                        <h5 className="font-semibold font-sans mb-2">Given Values</h5>
                        <div className="space-y-1 font-serif text-sm">
                          <div>Airspeed: 250 km/h (69.4 m/s)</div>
                          <div>Air density: 1.225 kg/m³</div>
                          <div>Wing area: 125 m²</div>
                          <div>Lift coefficient: 1.2</div>
                        </div>
                      </div>
                      <div className="p-4 bg-primary/10 rounded-lg">
                        <h5 className="font-semibold font-sans mb-2">Calculated Result</h5>
                        <div className="space-y-1 font-serif text-sm">
                          <div>Dynamic pressure: 2,953 Pa</div>
                          <div>Lift force: 442,950 N</div>
                          <div>≈ 45,200 kg equivalent</div>
                        </div>
                      </div>
                    </div>

                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base font-sans">Step-by-Step Calculation</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <div className="space-y-2 font-serif text-sm">
                          <div className="p-2 bg-muted rounded">
                            <strong>Step 1:</strong> Convert speed to m/s: 250 km/h ÷ 3.6 = 69.4 m/s
                          </div>
                          <div className="p-2 bg-muted rounded">
                            <strong>Step 2:</strong> Calculate dynamic pressure: ½ × 1.225 × (69.4)² = 2,953 Pa
                          </div>
                          <div className="p-2 bg-muted rounded">
                            <strong>Step 3:</strong> Calculate lift: 2,953 × 125 × 1.2 = 442,950 N
                          </div>
                          <div className="p-2 bg-green-50 border border-green-200 rounded">
                            <strong>Result:</strong> This lift can support approximately 45,200 kg aircraft weight
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="quiz" className="space-y-4">
                    {currentQuizData.length > 0 ? (
                      <div className="space-y-4">
                        {currentQuizData.map((question, index) => (
                          <Card key={index}>
                            <CardHeader>
                              <CardTitle className="text-base font-sans">Question {index + 1}</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-3">
                              <p className="font-serif">{question.question}</p>
                              <div className="space-y-2">
                                {question.options.map((option, optionIndex) => (
                                  <button
                                    key={optionIndex}
                                    onClick={() =>
                                      setQuizAnswers((prev) => ({
                                        ...prev,
                                        [`${selectedConcept}-${index}`]: optionIndex.toString(),
                                      }))
                                    }
                                    className={`w-full p-3 text-left rounded-lg border transition-colors font-serif ${
                                      quizAnswers[`${selectedConcept}-${index}`] === optionIndex.toString()
                                        ? optionIndex === question.correct
                                          ? "bg-green-50 border-green-500 text-green-800"
                                          : "bg-red-50 border-red-500 text-red-800"
                                        : "bg-card hover:bg-muted border-border"
                                    }`}
                                  >
                                    {option}
                                  </button>
                                ))}
                              </div>
                              {quizAnswers[`${selectedConcept}-${index}`] && (
                                <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                                  <p className="text-sm font-serif text-blue-800">
                                    <strong>Explanation:</strong> {question.explanation}
                                  </p>
                                </div>
                              )}
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground font-serif">
                        Quiz questions coming soon for this topic!
                      </div>
                    )}
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  )
}
